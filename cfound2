#include <iostream>
#include <iomanip>
#include <string>

using namespace std;

const int MAX_ARRAY_SIZE = 18;
const int MIN_ARRAY_SIZE = 8;
const int MAX_PIECES = 72; 
const int NOPLAYER = 0;
const int WHITEWINS = 1;
const int REDWINS = 2;
const int NOONEWINS = 0;
const int WHITESOLDIER = 1;
const int WHITEMULE = 2;
const int WHITEKING = 3;
const int REDSOLDIER = 4;
const int REDMULE = 5;
const int REDKING = 6;
const int WHITEPLAYER = 1;
const int REDPLAYER = 2;

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
                             int numRowsInBoard );
 
void DisplayBoard(const int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 
int numRowsInBoard);
 
int CountJumps( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 
int numRowsInBoard, int player, int xLocArray[], int yLocArray[] );
 
bool CheckList( int inArray1[], int inArray2[], int xIndex, int yindex);
 
int CountMove1Squares( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLocArray[],  int yLocArray[] );
 
bool IsMove1Square( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 
int numRowsInBoard, int player, int xLoc, int yLoc);
 
bool IsJump( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 
int numRowsInBoard, int player, int xLoc, int yLoc);
 
bool MakeMove( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 
int numRowsInBoard, int player, int fromSquareNum, 
int toSquareNum, bool &jumped );
 
bool CheckWin(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);

int main()
{

int myCMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE] = {0};
int xIndicesMove[] = {0}; 
int yIndicesMove[] = {0};
int xIndicesJump[] = {0};
int yIndicesJump[] = {0};
int numRowsInBoard = 0;
int counter = 0;

const int MAXGUESS = 3;

do
{
	cout << "Enter the number of squares along each edge of the board" << endl;
	
	if (!(cin >> numRowsInBoard))
	{
		cerr << "ERROR:  Board size is not an integer" << endl;
		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		counter++;
		continue;
	}

	if(numRowsInBoard > MAX_ARRAY_SIZE)
	{
		cerr << "ERROR:  Board size too large" <<  endl;
		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		counter++;
		continue;

	}
	
	else if (numRowsInBoard < MIN_ARRAY_SIZE)
	{
		cerr << "ERROR:  Board size too small" << endl;
		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		counter++;
		continue;
	}

	else if ( numRowsInBoard % 2 != 0 )
	{
		cerr << "ERROR:  Board size odd" << endl;
		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		counter++;
		continue;

	}
	else 
	{
		break;
	}


counter++;
}while(counter < MAXGUESS);

if( counter >= MAXGUESS)
{
	cerr << "ERROR:  Too many errors entering the size of the board" << endl;
	return 1; 
}

InitializeBoard(myCMCheckersBoard,numRowsInBoard);
DisplayBoard(myCMCheckersBoard,numRowsInBoard);

/*cout << "Enter the square number of the checker you want to move" << endl;
                                          
cerr << "ERROR:  you did not enter an integer" << endl;
cerr << "Try again" << endl; 

cerr << "ERROR:  that square is not on the board." << endl; 
cerr << "Try again" << endl;

cerr << "ERROR:  that square contains an opponentâ€™s checker" << endl;
cerr << "Try again" << endl;

cerr << "ERROR:  that square is empty" << endl;
cerr << "Try again" << endl;
                            
cerr << "ERROR: You can jump with another checker, you may not move your chosen checker" << endl;
cerr << "You can jump using checkers on the following squares:    " << endl; 
cerr << "Try again" << endl;
                                       
cerr << "ERROR: There is no legal move for this checker" << endl;
cerr << "Try again";

cerr << "ERROR:  you did not enter an integer" << endl;
cerr << "Try again" << endl;
                                       
cerr << "ERROR:  It is not possible to move to a square that is not on the board." << endl; 
cerr << "Try again" << endl;
                                       
cerr << "ERROR:  It is not possible to move to a square that is already occupied" << endl;
cerr << "Try again" << endl;
                                        
cerr << "ERROR:  You can jump with this checker, you must jump not move 1 space" << endl;
cerr << "Try again" << endl;
              

cerr << "ERROR: moving to that square is not legal, Try again" << endl;
cerr << "ERROR: moving to that square is not legal, Try again" << endl;*/


if (player ==1){
	player = 2;
}

else{
	player=1;
}






return 0;
}

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],int numRowsInBoard )
{
	int i=0;
	int j=0;
	string name;
	for(i=0;i<numRowsInBoard;i++)
	{
		for(j=0;j<numRowsInBoard;j++)
		{
			if(i==0)
			{
				CMCheckersBoard[i][j]=0;
				CMCheckersBoard[i][j+1]=2;
			}
			else if(i==1)
			{
				CMCheckersBoard[i][j]=1;
				CMCheckersBoard[i][j+1]=0;
			}
			else if(i==2)
			{
				CMCheckersBoard[i][j]=0;
				CMCheckersBoard[i][j+1]=1;
			}
			else if(i==3)
			{
				CMCheckersBoard[i][j]=1;
				CMCheckersBoard[i][j+1]=0;
			}
			else if((numRowsInBoard-i)==1)
			{
				CMCheckersBoard[i][j]=5;
				CMCheckersBoard[i][j+1]=0;
			}
			else if((numRowsInBoard-i)==2)
			{
				CMCheckersBoard[i][j]=0;
				CMCheckersBoard[i][j+1]=4;
			}
			else if((numRowsInBoard-i)==3)
			{
				CMCheckersBoard[i][j]=4;
				CMCheckersBoard[i][j+1]=0;
			}
			else if((numRowsInBoard-i)==4)
			{
				CMCheckersBoard[i][j]=0;
				CMCheckersBoard[i][j+1]=4;
			}
			else
			{
				CMCheckersBoard[i][j]=0;
			}
			//DisplayBoard(CMCheckersBoard,numRowsInBoard);
			cout<<CMCheckersBoard[i][j]<<" "<<CMCheckersBoard[i][j+1]<<' ';
		}
		cout<<endl;
	}
	//DisplayBoard(CMCheckersBoard,numRowsInBoard);

}

void DisplayBoard( const int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{

	int r = 0;
	int c = 0;
	int count = 0; 
	string name;

	for( r= 0; r<numRowsInBoard; r++)
	{
	
		for( c= 0; c<numRowsInBoard; c++)
		{
			//CMCheckersBoard[r][c] = count;
			//cout<< CMCheckersBoard[r][c]<<" ";
			if ( CMCheckersBoard[r][c] == 1 )
			{
				//cout<<setw(4) << "WS";
				name="WS";
			}
			else if(CMCheckersBoard[r][c] == 2)
			{
				//cout<<setw(4) << "WM";
				name="WM";
			}
			else if(CMCheckersBoard[r][c] == 3)
			{
				//cout<<setw(4) << "WK";
				name="WK";
			}
			else if(CMCheckersBoard[r][c] == 4)
			{
				//cout<<setw(4) << "RS";
				name="RS";
			}
			else if(CMCheckersBoard[r][c] == 5)
			{
				//cout <<setw(4)<< "RM";
				name="RM";
			}
			else if(CMCheckersBoard[r][c] == 6)
			{
				//cout <<setw(4)<< "RK";
				name="RK";
			}
			
				cout <<setw(4)<<count;
			    cout<<setw(4)<<name;    
			
			//cout<<setw(4)<<CMCheckersBoard[r][
			count++;
		}
		cout<<endl;
	}
}


int CountMove1Squares( int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],
int numRowsInBoard, int player, int xLocArray[],  int yLocArray[] )
{
	
	int i=0;

	for ( i=0; i<numRowsInBoard; i++){

			xLocArray[i]= -1;
			yLocArray[i]= -1;
	}
	
	// CHECK IF PARTS HAVE MOVES, BY DOING ARRAY, and testing for empty perpindiculoar parts
	if (player == 1)
	{
	//BIG LOOP
	}

	if (player == 2)
	{

	//BIG LOOP

	}





	return 0;

}
